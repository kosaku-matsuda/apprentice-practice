# あなたは階段を登っています。
# 頂上に到達するにはn段あります。
# 毎回、一段または二段登ることができます。
# いくつの方法で頂上に登ることができますか？
# input: n = 3
# output: 3
# 階段を3段登るパターンは以下
# 1. 1段 + 1段 + 1段
# 2. 1段 + 2段
# 3. 2段 + 1段
# フィボナッチ数列は前の項とその前の項を足したものが今の項になる
# つまりn-1とn-2を足すと=今の項になる
# 0,1,1,2,3,5,8
# 例えば0から一段登るには
# 0,1と0,1,1の2通り
# 二段登るには1,1を足しての2といきなり2段登る2の2通り
# 3段登るには0,1,1,2,の1,2を足した3
# # 0,1,1,2,3,5,8の0をnum1として次の1をnum2とするnum3はnum1(前々の項)+num2(前の項)で表すとnum3(今の項)
# これを繰り返していくと 0,1,1,2,3,5,8,n　というものが解けるようになる

def climb_stairs(n)
  num1 = 0
  num2 = 1
  for i in 0...n do
    puts "❶ 前々の項(num1)と前の項(num2)を足してnum3(今の項)を求めます。"
    num3 = num1 + num2
    puts "「num1は#{num1} + num2は#{num2}、これを足してnum3に代入します。」"
    puts "「今num3は#{num3}です。」"
    # 今num3には0+1=1が入っている
    puts "❷"
    num1 = num2
    puts "「num2は#{num2}でそれをnum1に代入します。」"
    puts "「なので今num1は#{num1}になりました。」"
    # 次にnum1(0)にnum2(1)を代入するのでnum1は1になっています。
    puts "❸"
    num2 = num3
    puts "「num3は#{num3}でそれをnum2に代入します。」"
    puts "「今num2は#{num2}になりました。」"
    # 次にnum２(1)にnum3(1)を代入するのでnum2は1のままです。
    if num1 == 1 && num2 == 1
      puts "これで今[0,1,1]となりました。"
    elsif num1 == 1 && num2 == 2
      puts "これで今[0,1,1,2]となりました。"
    elsif num1 == 2 && num2 == 3
      puts "これで今[0,1,1,2,3]となりました。"
    else
      puts "これで今[0,1,1,2,3,#{num3}]となりました"
    end
    puts "--------------------------"
  end
  return num3
end

puts climb_stairs(4)